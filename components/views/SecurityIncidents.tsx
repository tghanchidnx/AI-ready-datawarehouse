
import React, { useState } from 'react';
import Card from '../common/Card';
import { MOCK_SECURITY_INCIDENTS } from '../../constants';
import type { SecurityIncident, IncidentSeverity, IncidentStatus, IncidentTimelineEntry } from '../../types';
import { Bot, ShieldAlert, AlertTriangle, AlertCircle, CheckCircle, Info, Clock, User } from 'lucide-react';
import Tooltip from '../common/Tooltip';

const SeverityPill: React.FC<{ severity: IncidentSeverity }> = ({ severity }) => {
    const baseClasses = 'px-2.5 py-1 text-xs font-semibold rounded-full inline-flex items-center gap-1.5';
    const severityMap = {
        Critical: 'bg-red-700/50 text-red-300',
        High: 'bg-red-500/30 text-red-300',
        Medium: 'bg-yellow-500/20 text-yellow-300',
        Low: 'bg-blue-500/20 text-blue-300',
    };
    return <span className={`${baseClasses} ${severityMap[severity]}`}>{severity}</span>;
};

const StatusPill: React.FC<{ status: IncidentStatus }> = ({ status }) => {
    const baseClasses = 'px-2.5 py-1 text-xs font-semibold rounded-full inline-flex items-center gap-1.5';
    const statusMap: Record<IncidentStatus, string> = {
        Reported: 'bg-gray-500/20 text-gray-300',
        Investigating: 'bg-blue-500/20 text-blue-300',
        Identified: 'bg-purple-500/20 text-purple-300',
        Contained: 'bg-orange-500/20 text-orange-300',
        Resolved: 'bg-green-500/20 text-green-300',
        'Post-Mortem': 'bg-indigo-500/20 text-indigo-300',
    };
    return <span className={`${baseClasses} ${statusMap[status]}`}>{status}</span>;
};

const TimelineIcon: React.FC<{ status: IncidentStatus }> = ({ status }) => {
    const iconMap: Record<IncidentStatus, React.ReactNode> = {
        Reported: <AlertCircle size={18} className="text-brand-muted" />,
        Investigating: <Info size={18} className="text-blue-400" />,
        Identified: <User size={18} className="text-purple-400" />,
        Contained: <ShieldAlert size={18} className="text-orange-400" />,
        Resolved: <CheckCircle size={18} className="text-green-400" />,
        'Post-Mortem': <Clock size={18} className="text-indigo-400" />,
    };
    return <div className="absolute w-8 h-8 bg-brand-secondary rounded-full mt-2 -left-4 border-4 border-brand-primary flex items-center justify-center">{iconMap[status]}</div>;
}

const potentialIncidents = [
    { title: "Anomalous API Usage Detected", severity: "High", desc: "A high volume of unusual API calls were detected from a previously unseen IP range, targeting sensitive customer data endpoints." },
    { title: "Potential Privilege Escalation", severity: "Critical", desc: "A user account with 'Business Analyst' privileges attempted to access administrative functions multiple times, suggesting a possible privilege escalation attempt." },
    { title: "Unusual Data Access Pattern", severity: "Medium", desc: "The 'Archived Sales Data' source was accessed outside of normal business hours by a service account. This pattern deviates from established behavior." },
    { title: "Multiple Failed Login Attempts", severity: "Low", desc: "A brute-force attempt was detected against several user accounts. No successful logins were recorded from the offending IP." },
];

const SecurityIncidents: React.FC = () => {
    const [incidents, setIncidents] = useState<SecurityIncident[]>(MOCK_SECURITY_INCIDENTS);
    const [selectedIncident, setSelectedIncident] = useState<SecurityIncident | null>(incidents[0] || null);
    
    const handleTriggerAgentScan = () => {
        const randomIncident = potentialIncidents[Math.floor(Math.random() * potentialIncidents.length)];
        const timestamp = new Date().toISOString().replace('T', ' ').substring(0, 19) + ' UTC';
        
        const newIncident: SecurityIncident = {
            id: `INC-${String(incidents.length + 1).padStart(3, '0')}`,
            title: randomIncident.title,
            severity: randomIncident.severity as IncidentSeverity,
            status: 'Reported',
            reportedBy: 'AI Security Agent',
            reportedAt: timestamp,
            description: randomIncident.desc,
            timeline: [
                { timestamp: timestamp, status: 'Reported', notes: 'Automatically generated by AI agent based on anomalous log patterns.', user: 'AI Security Agent' },
            ],
        };

        setIncidents(prev => [newIncident, ...prev]);
        setSelectedIncident(newIncident);
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 h-full">
            <div className="lg:col-span-1 flex flex-col">
                <Card className="flex-grow">
                    <div className="flex justify-between items-center mb-4">
                        <h2 className="text-xl font-semibold">Security Incidents</h2>
                        <Tooltip text="Simulate AI Detection">
                            <button 
                                onClick={handleTriggerAgentScan}
                                className="flex items-center gap-2 px-3 py-1.5 text-sm bg-brand-accent/80 text-white rounded-lg hover:bg-brand-accent transition-colors font-semibold"
                            >
                                <Bot size={16} />
                                <span>Trigger AI Scan</span>
                            </button>
                        </Tooltip>
                    </div>
                    <ul className="space-y-2">
                        {incidents.map(inc => (
                            <li key={inc.id}>
                                <button
                                    onClick={() => setSelectedIncident(inc)}
                                    className={`w-full text-left p-3 rounded-md transition-colors flex flex-col ${selectedIncident?.id === inc.id ? 'bg-brand-accent/20' : 'hover:bg-brand-border'}`}
                                >
                                    <div className="flex items-center gap-3">
                                        <p className={`font-semibold ${selectedIncident?.id === inc.id ? 'text-brand-accent' : 'text-gray-200'}`}>{inc.title}</p>
                                    </div>
                                    <div className="mt-2 flex items-center justify-between">
                                        <SeverityPill severity={inc.severity} />
                                        <span className="text-xs text-brand-muted">{inc.id}</span>
                                    </div>
                                </button>
                            </li>
                        ))}
                    </ul>
                </Card>
            </div>
            <div className="lg:col-span-2">
                {selectedIncident ? (
                    <Card className="h-full">
                        <div className="flex justify-between items-start mb-2">
                            <div>
                                <h3 className="text-2xl font-bold text-white">{selectedIncident.title}</h3>
                                <p className="text-sm text-brand-muted">Reported on {selectedIncident.reportedAt} by {selectedIncident.reportedBy}</p>
                            </div>
                            <StatusPill status={selectedIncident.status} />
                        </div>

                        <div className="mt-4 p-4 bg-brand-primary border border-brand-border rounded-md prose prose-invert prose-sm max-w-none text-gray-300">
                            <p>{selectedIncident.description}</p>
                        </div>
                        
                        <div className="mt-6">
                            <h4 className="text-lg font-semibold text-gray-200 mb-4">Incident Timeline</h4>
                            <div className="relative border-l-2 border-brand-border ml-4">
                                {selectedIncident.timeline.map((entry, index) => (
                                    <div key={index} className="mb-6 ml-8">
                                        <TimelineIcon status={entry.status} />
                                        <div className="p-3 bg-brand-primary border border-brand-border rounded-md">
                                            <div className="flex justify-between items-center">
                                                <span className="text-sm font-semibold text-white">{entry.status}</span>
                                                <span className="text-xs text-brand-muted">{entry.timestamp}</span>
                                            </div>
                                            <p className="text-sm text-gray-300 mt-1">{entry.notes}</p>
                                            <p className="text-xs text-brand-muted mt-2">Updated by: {entry.user}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>

                    </Card>
                ) : (
                     <Card className="h-full flex items-center justify-center">
                        <p className="text-brand-muted">Select an incident to view details.</p>
                    </Card>
                )}
            </div>
        </div>
    );
};

export default SecurityIncidents;
